;;; -*- mode: lisp; -*-
(in-package :stumpwm)

;;; Autostart
(run-shell-command "nitrogen --restore")
(run-shell-command "emacs --daemon")
(run-shell-command "xsetroot -cursor_name left_ptr")
(run-shell-command "lxpolkit &")
(run-shell-command "xfce4-power-manager &")
(run-shell-command "nitrogen --restore &")

;; Set module directory (if not already set)
(set-module-dir "~/.clones/stumpwm-contrib/")
(defvar *config-dir* "~/.config/stumpwm/")
(defun load-config-file (relative-path)
  (load (concat *config-dir* relative-path)))

;;; Changing the prefix key to the super key
;; Clear the super key
(run-shell-command "xmodmap -e 'clear mod4'" t)
;; Bind the super key to F20
(run-shell-command "xmodmap -e \'keycode 133 = F20\'" t)
;; Set the prefix key to F20
(set-prefix-key (kbd "F20"))

(setf *message-window-gravity* :center
      *input-window-gravity* :center
      *window-border-style* :thin
      *menu-maximum-height* 15
      *message-window-padding* 10
      *maxsize-border-width* 2
      *normal-border-width* 2
      *transient-border-width* 2
      stumpwm::*float-window-border* 4
      stumpwm::*float-window-title-height* 20
      *mouse-focus-policy* :sloppy)

(defcommand better-quit () ()
  (let ((output (string-downcase (completing-read "Command: " (list "restart" "shutdown" "lock" "log out" "suspend" "sleep" "hibernate")))))
    (if (string/= output "")
        (cond ((string= output "restart")
               (run-shell-command "reboot"))
              ((string= output "shutdown")
               (run-shell-command "shutdown -h now"))
              ((string= output "lock")
               (run-shell-command "XSECURELOCK_FONT='JetBrains Mono Nerd Font' XSECURELOCK_AUTH_BACKGROUND_COLOR='#18181B' XSECURELOCK_AUTH_FOREGROUND_COLOR='#E4E4E8' xsecurelock"))
              ((string= output "log out")
               (eval-command "quit"))
              ((or (string= output "suspend") (string= output "sleep"))
               (run-shell-command "systemctl suspend"))
              ((string= output "hibernate")
               (run-shell-command "systemctl hibernate"))
              (t (echo "Please enter restart, shutdown, log out, suspend or hibernate."))))))

;;; Keybinds
;; Core
(define-key *root-map* (kbd "Q") "better-quit")
(define-key *root-map* (kbd "R") "restart-hard")
(define-key *root-map* (kbd "ESC") "send-escape")
(define-key *root-map* (kbd "p") "exec")

;; Miscellaneaous
(define-key *root-map* (kbd "C-m") "mode-line")

;; Basic navigation and manipulation
(define-key *root-map* (kbd "h") "move-focus left")
(define-key *root-map* (kbd "j") "move-focus down")
(define-key *root-map* (kbd "k") "move-focus up")
(define-key *root-map* (kbd "l") "move-focus right")
(define-key *root-map* (kbd "H") "move-window left")
(define-key *root-map* (kbd "J") "move-window down")
(define-key *root-map* (kbd "K") "move-window up")
(define-key *root-map* (kbd "L") "move-window right")

(define-key *root-map* (kbd "s") "vsplit")
(define-key *root-map* (kbd "v") "hsplit")
(define-key *root-map* (kbd "=") "balance-frames")
(define-key *root-map* (kbd "'") "windowlist")

(setf *resize-increment* 25)
(define-key *root-map* (kbd "C-l") "resize-direction Right")
(define-key *root-map* (kbd "C-h") "resize-direction Left")
(define-key *root-map* (kbd "C-k") "resize-direction Up")
(define-key *root-map* (kbd "C-j") "resize-direction Down")

(define-key *root-map* (kbd "C") "delete")
(define-key *root-map* (kbd "r") "remove")
(define-key *root-map* (kbd "C-r") "iresize")

(define-key *root-map* (kbd "S-RET") "exec alacritty")

(define-key *root-map* (kbd "M-e") "exec emacsclient -a '' -c")
(define-key *root-map* (kbd "M-b") "exec firefox-devedition")
(define-key *root-map* (kbd "M-f") "exec alacritty -e ranger")

;; Audio:
(define-key *top-map* (kbd "XF86AudioRaiseVolume") "exec amixer -q set Master 5%+")
(define-key *top-map* (kbd "XF86AudioLowerVolume") "exec amixer -q set Master 5%-")
(define-key *top-map* (kbd "XF86AudioMute") "exec amixer -q set Master toggle")

;; Brightness
(define-key *top-map* (kbd "XF86MonBrightnessUp") "exec xbacklight -inc 10")
(define-key *top-map* (kbd "XF86MonBrightnessDown") "exec xbacklight -dec 10")

;; ;;; Groups
(defvar *alternateved/workspaces* (list "Normal" "Communication" "Development"))
(stumpwm:grename (nth 0 *alternateved/workspaces*))
(dolist (workspace (cdr *alternateved/workspaces*))
  (stumpwm:gnewbg workspace))
;;
;; (dotimes (y (length *alternateved/workspaces*))
;;   (let ((workspace (write-to-string (+ y 1))))
;;     (define-key *root-map* (kbd workspace) (concat "gselect " workspace))))

;; (defvar *move-to-keybinds* (list "!" "@"  "#" "$" "%" "^" "&" "*" "("))
;; (dotimes (y (length *alternateved/workspaces*))
;;   (let ((workspace (write-to-string (+ y 1))))
;;     (define-key *root-map* (kbd (nth y *move-to-keybinds*)) (concat "gmove " workspace))))

(define-frame-preference "Communication" (2 NIL t :class "discord"))
(push '(:class "discord") stumpwm:*deny-raise-request*)

(define-frame-preference "Communication" (2 NIL t :class "Signal"))
(push '(:class "Signal") stumpwm:*deny-raise-request*)

(define-frame-preference "Communication" (2 NIL t :class "Thunderbird"))
(push '(:class "Thunderbird") stumpwm:*deny-raise-request*)

(let ((bg "#18181B")
      (middle "#4B5254")
      (fg "#E4E4E8"))

  (set-fg-color fg)
  (set-bg-color bg)
  (set-border-color bg)
  (set-focus-color fg)
  (set-unfocus-color bg)
  (setf border-width 1)

  (setf *mode-line-foreground-color* fg
        *mode-line-background-color* bg
        *mode-line-border-color* bg
        *mode-line-border-width* 1
        *mode-line-highlight-template* "^R~A^r")

  (setf *grab-pointer-character* 20
        *grab-pointer-character-mask* 21)

  (setf (car *colors*) bg
	(car (last *colors*)) fg)
  (update-color-map (current-screen)))

;; Mode line
(defvar *mode-line-sep* " | "
  "Symbol for seperating elements on the mode line")

(setf *group-format* " %t ")
(setf *screen-mode-line-format*
      (list " "
            "%g"
            *mode-line-sep*
            "%w"
            "%u"
            "^>"
            *mode-line-sep*
            "%d"
            " "))

(setf *mode-line-pad-x* 0)
(setf *time-modeline-string*
      "%a %b %e %R")

(setf *window-format*
      "%n: %12c")

(defcommand toggle-all-mode-lines () ()
    (loop for head in (screen-heads (current-screen)) do
      (toggle-mode-line (current-screen) head)))

(toggle-all-mode-lines)
(define-key *root-map* (kbd "\\") "toggle-all-mode-lines")

